---
title: "Introduction to Shiny Apps in R"
subtitle: "21 March 2024"
author: "Dr Nicola Rennie"
format:
  LUstyle-revealjs:
    self-contained: true
    auto-stretch: false
    footer: ""
---

# Welcome!

## What to expect during this workshop

The workshop will run for *1 hour*.

* Combines slides, live coding examples, quiz questions, and exercises for you to participate in.

* Ask questions throughout!

# What is Shiny? {background-color="#D9DBDB"}

## What is Shiny?

::: {.columns}

::: {.column}

* Shiny is an open source R package that provides a framework for building web applications using R.

* Shiny helps you turn your analyses into interactive web applications without requiring HTML, CSS, or JavaScript knowledge.

:::

::: {.column}

![](images/shiny.png){fig-align="center" fig-alt="Shiny hex logo" width="70%"}

:::

:::

## What can you build with Shiny?

::: {.columns}

::: {.column}

* Interacting with and exploring data

* Showcasing how models work under a wide range of parameters

* Developing apps as teaching aids

* ...

:::

::: {.column}

![](images/examples.png){fig-alt="Shiny examples" width="90%"}

See: [shiny.posit.co/r/gallery](https://shiny.posit.co/r/gallery/)

:::

:::

# Building a Shiny app {background-color="#D9DBDB"}

## Packages required

Assuming that you already have R installed, you will also need the {shiny} R package:

```{r}
#| eval: false
#| echo: true
install.packages("shiny")
library("shiny")
```

## Structure of a Shiny App

Shiny apps come in two parts:

::: {.columns}

::: {.column .fragment}

### UI

:::

::: {.column .fragment}

### Server

:::

:::

## Structure of a Shiny App

* Single file app (called `app.R`)

* Multiple file app (including reusable modules)

* Shiny app as an R package

## Structure of a Shiny App

Single file app:

```{r}
#| eval: false
#| echo: true
library(shiny)

# UI ----------------------------------------------------------------------

ui <- fluidPage()

# Server ------------------------------------------------------------------

server <- function(input, output) {
  
}

# Run app -----------------------------------------------------------------

shiny::shinyApp(ui, server)

```

*Other options instead of `fluidPage()` exist.

## Exercise 1

```{r}
#| label: ex-1-timer
countdown::countdown(
  minutes = 5,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "0.5em",
  font_size = "2em"
)
```

* Open up your IDE of choice.

* Make sure you have the {shiny} package installed.

* Create an `app.R` file.

* Add `ui` and `server` elements, as well as `shiny::shinyApp(ui, server)`.

* Check it works.

## Building the User Interface (UI)

What's included in the UI?

* App layouts
* User inputs
* Outputs

## Handling User Inputs

Working with various input controls: text inputs, sliders, checkboxes, etc.
Capturing user input and using it within your Shiny application

## Exercise 2

```{r}
#| label: ex-1-timer
countdown::countdown(
  minutes = 5,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "0.5em",
  font_size = "2em"
)
```

* Inside the `fluidPage()` function, add a title panel, sidebar, and main panel.

* Add a drop down menu with `selectInput()` to choose by *Island*.

* What happens if you use `checkboxGroupInput()` instead?

* Bonus: add additional user options! See: [mastering-shiny.org/basic-ui.html](https://mastering-shiny.org/basic-ui.html)


## Reactive Programming with Shiny

Overview of reactive programming concepts in Shiny
Understanding reactivity: Inputs, Outputs, and Reactive Expressions

## Generating Outputs

Introduction to output elements: plots, tables, text, etc.
Rendering dynamic outputs based on user inputs and reactive expressions

## Exercise 3

```{r}
#| label: ex-3-timer
countdown::countdown(
  minutes = 5,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "0.5em",
  font_size = "2em"
)
```

Add reactive component

# Deploying a Shiny app {background-color="#D9DBDB"}

## What do we mean by deployment?

## *Traditional* deployment

Options for deploying Shiny apps: Shiny Server, shinyapps.io, etc.
Steps to deploy your Shiny app for public or private access

## Shinylive

# Best Practices and Tips {background-color="#D9DBDB"}

## Best Practices and Tips

Tips for efficient Shiny app development
Common pitfalls and how to avoid them
Resources for further learning and support

## Additional resources

Mastering Shiny: [mastering-shiny.org/basic-ui.html](https://mastering-shiny.org/basic-ui.html)

shinyuieditor



## Workshop resources

* GitHub: [github.com/nrennie/intro-to-shiny-workshop](https://github.com/nrennie/intro-to-shiny-workshop)

* Slides: [nrennie.github.io/intro-to-shiny-workshop](https://nrennie.github.io/intro-to-shiny-workshop)

## Questions


## 

::: columns
::: {.column}

<br>

{{< fa brands linkedin >}} [nicola-rennie](https://www.linkedin.com/in/nicola-rennie/)

{{< fa brands github >}} [nrennie](https://github.com/nrennie)

{{< fa globe >}} [nrennie.rbind.io](https://nrennie.rbind.io/)

{{< fa envelope >}} [n.rennie@lancaster.ac.uk](mailto:n.rennie@lancaster.ac.uk)

:::
::: {.column}

![](images/qr-code.png){fig-align="center" fig-alt="QR code" width=70%}

:::
:::
